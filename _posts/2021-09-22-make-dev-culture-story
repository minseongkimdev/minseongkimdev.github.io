---
title: "SI 개발 환경에서 개발문화 개선하기"
layout: post
category: Thinking
---

## 들어가면서

작년에 골프 스윙 영상을 분석해주는 B2C 서비스를 개발하는 신생 팀에 합류하게 되었다.

SI와 컨설팅을 위주로 하는 회사다보니 B2C 서비스 개발에서도 SI에서 개발하는 방식을 따르고 있었다.

지난 1년 정도의 시간동안 SI 개발 환경에서 어떻게 개발문화를 조금씩 개선해왔는지에 대한 경험을 짧은 회고형태로 적어보려고 한다.


## 1. 작은 것부터 차근차근

한 번에 많은 것을 바꾸기에는 아래와 같은 제약 사항이 있었다.
### 타이트한 일정

사용자 수가 10배 정도 차이나는 경쟁사의 아직 iOS 버전이 출시되지 않은 상태라 iOS 버전을 빠르게 개발해야 하는 일정이 빠듯한 상황이었다.
### 팀원들의 적응 시간

아무리 좋은 개발 프로세스더라도 팀원들이 적응하는데 너무 오랜 시간이 걸리면 무의미하다고 생각했다.

그래서 꽤 불편하지만 새로 도입하더라도 팀원들이 쉽게 적응할 수 있는 것이 무엇이 있을까 생각한 끝에

주로 SI회사에서 차용하고 있는 방식인데 아래와 같이 WBS라고 프로젝트의 일정관리가 사내 NAS에서 엑셀 파일을 통해 관리되고 있었다.

![](https://user-images.githubusercontent.com/44136364/134854177-556ed242-565f-4929-9e11-3c8b1020814d.png)

이런 방식으로 관리했을 때 아래와 같은 불편함들이 있다.
* 여러 사람이 동시에 엑셀파일을 수정했을 때 충돌이 생길 수 있음.
* 진행상황에 대한 상세한 문서화가 어려움.
* 일정 외에 관련 테스크에 대한 이슈등과 같은 세부적인 내용을 관리하기 어려움.

하지만 Github이나 Gitlab에서 소스관리 뿐만 아니라 일정과 이슈관리도 가능하다.

그래서 아래와 같이 버전별로 마일스톤을 생성한 뒤 그 마일스톤 안에서 이슈들을 문서화 하였다.

하이퍼 링크를 통해 이슈에 해당하는 커밋으로 바로 이동할 수 있어 문서를 확인하고 이에 해당하는 소스를 다시 찾아야 하는 불편함을 해결할 수 있었다.



![](https://user-images.githubusercontent.com/44136364/134855568-bcfca336-5ac5-43f6-bbb7-6dfd3db06b2a.png)

## 2. 조금씩 붙는 자신감


## 가동성 증진
## 불필요한 작업 하지 않음

## 2. 우리 이제 버전관리 제대로 해볼까요? 깃 플로우 전략 수립

## 3. 배포 자동화 도입 CI/CD

## 4. 코어 로직에 테스트 코드 점진적으로 도입하기

### 모바일 앱 특성상 UI 테스트는 초기 출시 단계에 도입하기엔 비효율적이라 생각해서 UI 테스트를 도입해보지 못한 아쉬움은 남았다.
# 코어 로직

## 프로젝트 구조 도형으로 그리고 어느 부분에 도입해는지 그림으로 설명하기
## 5. 디자인 패턴 적용

## 안드로이드 에선 MVP 최소한의 뷰로직과 비지니스 로직을 분리 하지만 파일이 동시에 늘어난
## 이를 개선해보기 위해 RxSwift, Reactorkit을 

구조적 개선

팀 내에 유능한 iOS 개발자 분이 계셔서 가능했다.

## 번외 팔로우쉽에 대한 이야기

## 5. 글을 마치며

안드로이드 버전을 출시한 이후에는 어느정도의 여유가 생겨 여태까지 일하면서 불편한 점들을 복기해보았다.

<!-- > "비록 내일 지구의 종말이 온다 하더라도 나는 오늘 한 그루의 사과나무를 심겠다."  -->


<!-- 팔로우쉽도 중요하다. -->
<!-- 

"비록 SI 환경일지라도 나는 오늘 한 줄의 테스트 코드를 더 작성하겠다."

 -->

비록 작은 부분일지라도 차근차근 개선을 하니 어느새 몇 개월 동안 여러 부분을 개선할 수 있었다.

> "비록 내일 지구의 종말이 온다 하더라도 나는 오늘 한 그루의 사과나무를 심겠다."

스피노자라는 철학자가 남긴 말인데, 내가 가졌던 마인드를 가장 잘 대변해주는 것 같다.

아무리 절망적인 상황이라도 시도를 해보고 그 시도에 의의가 있다는 의미가 있다.

> 이끌거나, 따르거나, 떠나거나!

모 회사의 슬로건 중 하나인데, 리더십도 중요하지만

입사하자마자 빠르게 안드로이드 앱을 코드가 하나도 없는 빈 레포에서 출시까지 해야하는 상황이었다.
그 당시에 너무 급하게 개발하는거 아닌가? 라는 생각을 했지만

"봄 시즌부터 골프 성수기이니까 그 전에는 출시해야 사업을 개진할 수 있다." 라는 비지니스적인 맥락을 알게되고 나서 바로 수긍이 되었다. 그 결과 출시후 4개월 뒤에 누적 스윙 1만건을 달성하여 괜찮은 성과를 이뤘다. 




안드로이드 버전을 출시한 이후에는 어느정도의 여유가 생겨 여태까지 일하면서 불편한 점들을 복기해보았다.

<!-- > "비록 내일 지구의 종말이 온다 하더라도 나는 오늘 한 그루의 사과나무를 심겠다."  -->


<!-- 팔로우쉽도 중요하다. -->
<!-- 

"비록 SI 환경일지라도 나는 오늘 한 줄의 테스트 코드를 더 작성하겠다."

 -->


<!-- 글 흐름 -->

<!-- 맥락 설명 -->
<!-- 
1. 합류하고 나서
2. 안드로이드를 출시하고 나서
3. 주니어 PM
4. 체크 리스트 (점진적 도입) 가장 핵심이 되는 진단 부분에 테스트 코드 도입, CI/CD 배포 자동화, 기술 블로그 개설
5. iOS 버전 출시 (프로젝트 개선 빌드 tuist Reactor킷, rx 구조 개선. iOS 프리랜서님의 도움으로)
6. 그냥 퇴사하는건 남아있는 동료들, 스스로의 책임감이 허락하지 않았다. 내가 할 수 있는데까지는 해보자는 생각을 했고 멋지게 졸업하고 싶었다.
7. 현 회사에서 좋은 개발문화 정착이라는 숲을 일궈내진 못했지만 하나의 작은 씨앗을 심었다고. 내가 몸담았던 개발조직이 더 성장하길 바라며. -->

- 하나의 브랜치로 관리
- 배포 자동화
- 수정 및 배포할 때 마다 특히 코어 모듈쪽 로직에 대해 일일이 테스트 해야 하는 불편함과 혹시 모를 버그에 대한 두려움
- 